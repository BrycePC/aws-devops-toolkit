AWSTemplateFormatVersion: 2010-09-09
Description: >-
  DevOps Toolkit Login; Cognito UserPool & API

Transform:
  - AWS::Serverless-2016-10-31

Parameters:

  Environment:
    Type: String
    Description: NB Toolkit deployments are AWS account-specific, with assumption that each environment has its own account
    AllowedValues:
      - dev
      - prod
  EnvironmentName:
    Type: String

  Route53AppZoneId:
    Type: String

  Route53AppDomainName:
    Type: String

  WebSubdomainName:
    Type: String
    Default: "toolkit"

  EmailVerificationMessage:
    Type: String
    Default: "Your verification code is {####}"

  EmailVerificationSubject:
    Type: String
    Default: "Your verification code"

  LambdaReservedConcurrency:
    Type: String
    Default: 10

  UserEmailDomainAllowedCsv:
    Type: String

Resources:


  UserPool:
    Type: AWS::Cognito::UserPool
    # DeletionPolicy: Retain
    Properties:
      UserPoolName: !Sub "${AWS::StackName}"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: False
      UsernameConfiguration:
        CaseSensitive: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true

        - Name: family_name
          AttributeDataType: String
          Required: true
          Mutable: true

        - Name: given_name
          AttributeDataType: String
          Required: true
          Mutable: true
      UsernameAttributes:
        - email
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      AutoVerifiedAttributes:
        - email

      EmailVerificationMessage: !Ref EmailVerificationMessage
      EmailVerificationSubject: !Ref EmailVerificationSubject
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA
      Policies:
        PasswordPolicy:
          MinimumLength: 14
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      LambdaConfig:
        PreSignUp: !GetAtt CognitoPreSignupFunction.Arn
        PostConfirmation: !GetAtt CognitoPostConfirmationFunction.Arn
      MfaConfiguration: "ON"

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub devopstoolkit-auth-${Environment}
      UserPoolId: !Ref UserPool

  UserPoolAdministratorGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: "Administrators"
      UserPoolId: !Ref UserPool

  UserPoolMaintainersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: "Maintainers"
      UserPoolId: !Ref UserPool

  UserPoolViewersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: "Viewers"
      UserPoolId: !Ref UserPool

  UserPoolUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: "Users"
      UserPoolId: !Ref UserPool

  UserPoolWebClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${AWS::StackName}l-webclient"
      CallbackURLs: !Sub "https://${WebSubdomainName}.${Route53AppDomainName}/"
      LogoutURLs: !Sub "https://${WebSubdomainName}.${Route53AppDomainName}/logout"
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: minutes
      RefreshTokenValidity: 480
      AccessTokenValidity:  60
      IdTokenValidity:  60
      UserPoolId: !Ref UserPool
      ReadAttributes:
        - email
        - email_verified
        - family_name
        - given_name
        - updated_at
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - profile
        - aws.cognito.signin.user.admin
      SupportedIdentityProviders:
        - COGNITO

  CognitoPreSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 30
      AutoPublishAlias: prod
      DeploymentPreference:
        Type: AllAtOnce
      ReservedConcurrentExecutions: !Ref LambdaReservedConcurrency
      Description: Executes on user signup confirmation
      Tracing: Active
      Environment:
        Variables:
          DEBUG_ENABLED: true
          DOMAINALLOWLIST: !Ref UserEmailDomainAllowedCsv
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/lambda/cognito-presignup/index.ts

  CognitoPreSignupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '', [ "/aws/lambda/", !Ref CognitoPreSignupFunction ] ]
      RetentionInDays: 365

  CognitoPostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: index.handler
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 30
      AutoPublishAlias: prod
      DeploymentPreference:
        Type: AllAtOnce
      ReservedConcurrentExecutions: !Ref LambdaReservedConcurrency
      Description: Executes on user signup confirmation
      Tracing: Active
      Environment:
        Variables:
          DEBUG_ENABLED: true
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/lambda/cognito-postconfirmation/index.ts

  CognitoPostConfirmationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '', [ "/aws/lambda/", !Ref CognitoPostConfirmationFunction ] ]
      RetentionInDays: 365

  UserPoolPreSignupLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      Principal: "cognito-idp.amazonaws.com"
      FunctionName: !Ref CognitoPreSignupFunction
      SourceArn: !GetAtt UserPool.Arn

  UserPoolPostConfirmationLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      Principal: "cognito-idp.amazonaws.com"
      FunctionName: !Ref CognitoPostConfirmationFunction
      SourceArn: !GetAtt UserPool.Arn

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Description: Devops Toolkit UserPool
    Export:
      Name: !Sub "${AWS::StackName}:UserPool:Id"

  UserPoolArn:
    Value: !GetAtt UserPool.Arn
    Description: Devops Toolkit UserPool Arn
    Export:
      Name: !Sub "${AWS::StackName}:UserPool:Arn"

  UserPoolWebClientId:
    Value: !Ref UserPoolWebClient
    Description: Web ClientId
    Export:
      Name: !Sub "${AWS::StackName}:UserPool:WebClientId"
